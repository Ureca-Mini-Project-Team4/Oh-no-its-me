name: dev CI/CD

on:
  push:
    branches: [ dev ]

jobs:
  dev-ci-cd:
    runs-on: ubuntu-latest
    steps:
      # 1. 코드 체크아웃
      - name: Checkout Latest Repo
        uses: actions/checkout@v3

      # 2. JDK 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. gradlew 실행 권한 부여
      - name: Grant execute permission for gradlew
        working-directory: ./springboot-app  # springboot-app 디렉토리에서 실행
        run: chmod +x gradlew

      # 4. Gradle 빌드 (JAR 파일 생성)
      - name: Build with Gradle
        working-directory: ./springboot-app  # springboot-app 디렉토리에서 실행
        run: ./gradlew clean bootJar

      # 5. Docker 이미지 빌드
      - name: Docker build
        working-directory: ./springboot-app  # springboot-app 디렉토리에서 실행
        run: |
          docker login -u youngxzu -p ${{ secrets.DOCKERHUB_TOKEN }}
          docker build -t youngxzu/springboot-main-cicd .
          docker tag youngxzu/springboot-main-cicd:latest youngxzu/springboot-main-cicd:v1.0.1
          docker push youngxzu/springboot-main-cicd:v1.0.1

      # 6. 현재 시간으로 버전 태그 만들기
      - name: Get timestamp
        uses: gerred/actions/current-time@master
        id: current-time

      # 7. 시간 포맷 변경
      - name: Run string replace
        uses: frabert/replace-string-action@master
        id: format-time
        with:
          pattern: '[:\.]+'
          string: "${{ steps.current-time.outputs.time }}"
          replace-with: '-'
          flags: 'g'

      # 8. Elastic Beanstalk 배포
      - name: Beanstalk Deploy
        uses: einaregilsson/beanstalk-deploy@v21
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: springboot-app
          environment_name: Springboot-app-env
          version_label: "springboot-app-version-2"
          region: us-east-2
          deployment_package: springboot-app/Dockerrun.aws.json  # springboot-app 경로에 있는 Dockerrun.aws.json 파일 사용
